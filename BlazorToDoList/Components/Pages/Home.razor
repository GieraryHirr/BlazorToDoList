@page "/"

@using Microsoft.AspNetCore.Authorization
@using BlazorToDoList.Codes

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SymetricEncryptionHandler SymetricEncryptionHandler
@inject AsymtericEncryptionHandler AsymetricEncryptionHandler

@attribute [Authorize(Policy = "AuthenticatedUser")]

<PageTitle>Home</PageTitle>

@if (_symetricEncryptionOutput != null)
{
    <p>Symetric encryption - @_symetricEncryptionOutput</p>
}

@if (_symetricDecryptionOutput != null)
{
    <p>Symetric decryption - @_symetricDecryptionOutput</p>
}

@if (_asymetricEncryptionOutput != null)
{
    <p>Asymetric encryption - @_asymetricEncryptionOutput</p>
}

@if (_asymetricDecryptionOutput != null)
{
    <p>Asymetric decryption - @_asymetricDecryptionOutput</p>
}

<h1>Username - @Username</h1>

@code {
    private string? _md5;
    private string? _sha256;
    private string? _hmac256;
    private string? _pbkf2String;
    private string? _pbkf2Array;
    private string? _bcryptHashed;
    private bool? _bcryptVerified;
    private string _inputCpr;
    private string _symetricEncryptionOutput;
    private string _symetricDecryptionOutput;
    private string _asymetricEncryptionOutput;
    private string _asymetricDecryptionOutput;


    public string Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _symetricEncryptionOutput = SymetricEncryptionHandler.EncryptSymetrisk("Hi Oskar");
        _symetricDecryptionOutput = SymetricEncryptionHandler.DecryptSymetrisk(_symetricEncryptionOutput);
        _asymetricEncryptionOutput = AsymetricEncryptionHandler.EncryptAsymteric("Hi Oskar");
        _asymetricDecryptionOutput = AsymetricEncryptionHandler.DencryptAsymteric(_asymetricEncryptionOutput);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Username = user.Identity?.Name;
    }
}
