@page "/to-do-list"

@using Microsoft.AspNetCore.Authorization
@using BlazorToDoList.Services.Interfaces
@using BlazorToDoList.Models

@inject IToDoService ToDoService
@inject ICprService CprService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Policy = "AuthenticatedUser")]


@if(Username != null)
{
    <h1>User - @Username</h1>
}

@if (Cpr != null)
{
    <p>CPR - @Cpr</p>
}

@if (Cpr == null)
{
    <input type="number" placeholder="CPR" @bind="_inputCpr" />
    <button @onclick="SubmitCpr">Submit</button>
    @if (CprErrorMessage != null)
    {
        <p style="color: red">@CprErrorMessage!</p>
    }
}

@if (Cpr != null)
{
    <input type="text" placeholder="Item" @bind="_inputTask" />
    <button @onclick="SubmitTask">Submit</button>
}

@if (TodoList is { Count: > 0 })
{
    <table>
        <thead>
        <tr>
            <th>To do items</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var todoList in TodoList)
            {
                <tr>
                    <td>@todoList.Item</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? _inputCpr;
    private string? _inputTask;
    public string? Username { get; set; }
    public string? Cpr { get; set; }
    public string? CprErrorMessage { get; set; }
    public List<TodoList> TodoList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Username = user.Identity?.Name;
    }

    private async Task SubmitCpr()
    {
        if (Username != null && _inputCpr != null)
        {
            Cpr = await CprService.Add(Username, _inputCpr);

            if (Cpr == null)
                CprErrorMessage = "You already have registered CPR. Please submit correct one";

            else
            {
                CprErrorMessage = null;
                TodoList = await ToDoService.GetTasks(Username);
            }
        }
    }

    private async Task SubmitTask()
    {
        if (Username != null && _inputTask != null)
        {
            await ToDoService.AddTask(Username, _inputTask);
            TodoList = await ToDoService.GetTasks(Username);
            _inputTask = null;
        }
    }
}
